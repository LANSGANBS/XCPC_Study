左边界为求解的判断状态
int l = 0, r = 0x3f3f3f3f;
if (!check(l)) return NO_SOLUTION;
if(check(r)) return r;
while (l + 1 < r) {
    int mid = l + (r - l) / 2;
    if (check(mid)) l = mid;
    else r = mid;
}
return l;
右边界为求解的判断状态
int l = 0, r = 0x3f3f3f3f;
if (check(l)) return l;
if(!check(r)) return NO_SOLUTION;
while (l + 1 < r) {
    int mid = l + (r - l) / 2;
    if (check(mid)) r = mid;
    else l = mid;
}
return l;
前驱
int lo = 1, hi = 1E9;
while (lo < hi)
{
    int m = (lo + hi + 1) / 2;
    if (check(m))
    {
        lo = m;
    }
    else
    {
        hi = m - 1;
    }
}
std::cout << lo << "\n";
后继
int lo = 1, hi = n;
while (lo < hi)
{
    int m = (lo + hi) / 2;
    if (check(m))
    {
        hi = m;
    }
    else
    {
        lo = m + 1;
    }
}
std::cout << lo << "\n";